#include <Trade/Trade.mqh>
#include <Flex/GetSuppResPoints.mqh>

CTrade Trade;

input group "Main"
input int RegularDRSessionStart = 930;
input int RegularDRSessionEnd = 1030;
input int RegularDRTradeEnd = 1600;

input int EveningDRSessionStart = 1930;
input int EveningDRSessionEnd = 2030;
input int EveningDRTradeEnd = 0200;

input int OvernightDRSessionStart = 300;
input int OvernightDRSessionEnd = 400;
input int OvernightDRTradeEnd = 830;

input int HourOffset = 7;

input int RandomEntryPeriod = 9;
input int StopLoss = 10;
input int TakeProfit = 30;
input int TrailingStopPips = 20;
input group "Money management"
input double Lots = 0.01;
input int dynamicSL = 0; 
input double volatilityMultipler = 1; 
input int  volPeriod = 12;//12; 
input group "Miscellaneous"
input int Slippage = 3;
input int Magic = 794823491;
input int RsiPeriod = 20;
input double RsiMin = 20;
input double RsiMax = 80;
input string Commentary = "myPowerfulScalper";
input bool ShowBoxes = true;
input bool ShowTradeEnd = true;

// Global variables:
datetime LastEntryTime = 0;
int OrderTaken = 0;
ENUM_SYMBOL_TRADE_EXECUTION Execution_Mode;
double Poin;
int Deviation = 3;
double volFactor;
int MagicNumber;
int OrderSelectByMagic;
double closePrice;
int SELECT_BY_TICKET = 0;

double DR_high;
double DR_low;


double IDR_high;
double IDR_low;

// Risk Management
 
// Set percentage risk to 2%
double percentageRisk = 2.00;
 
// Get account equity
double equity = AccountInfoDouble(ACCOUNT_BALANCE);
 
// Calculate 2% of account equity
double maxRisk = equity * (percentageRisk/100);
 
// Calculate 2 positions maximum per trade
double lotsPerTrade = maxRisk/StopLoss;
 
// Calculate the number of positions depending on account equity
int maxPositions = (int)(lotsPerTrade/Lots);
 
// Set the max number of orders
int maxOrders = maxPositions; 


#define STO_HIGH_LOW 2


datetime TimeToDt(int hours, int minutes, int seconds)
{
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(),dt);
    dt.sec = seconds;
    dt.min = minutes;
    dt.hour = hours;
    return StructToTime(dt)+3600*HourOffset;
    
}


 
// Function to get total number of orders
int GetOrdersTotal()
{
    int totalOrders = OrdersTotal();
    return totalOrders;
}
// OrderProfit function
double OrderProfit()
{
    // Get the profit of the current order
    if (OrderSelect(0, SELECT_BY_POS, MODE_TRADES))
        return OrderProfit();
    else 
        return 0;
}

// OrderMagicNumber function
int OrderMagicNumber()
{
    // Get the magic number of the current order
    if (OrderSelect(0, SELECT_BY_POS, MODE_TRADES))
        return OrderMagicNumber();
    else 
        return 0;
}

// OrderCommission function
double OrderCommission()
{
    // Get the commission of the current order
    if (OrderSelect(0, SELECT_BY_POS, MODE_TRADES))
        return OrderCommission();
    else 
        return 0;
}

// OrderSwap function
double OrderSwap()
{
    // Get the swap of the current order
    if (OrderSelect(0, SELECT_BY_POS, MODE_TRADES))
        return OrderSwap();
    else 
        return 0;
}

// OrderClose function
bool OrderClose(int ticket, double lots, double price, int slippage, color arrow_color)
{
        // Check if order is still open
    if (OrderSelect(ticket))
    {
        // Close the order
        if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(price, Digits()), slippage, arrow_color))
            return true;
    }

    return false;
}
bool OrderSelect(int index, int select, int pool)
{
    int result = ::OrderSelect(index, select, pool);
    if (result == false)
    {
        return false;
    }
    return true;
} 
// OrderTicket function
int OrderTicket()
{
    // Get the ticket of the current order
    if (OrderSelect(0, SELECT_BY_POS, MODE_TRADES))
        return OrderTicket();
    else
        return 0;
}

double OrderLots()
{
    // Declare a variable to store the number of lots of the current order
    double lots;
    // Get the number of lots of the current order
    ENUM_ORDER_TYPE type = OrderType();
    if (type == ORDER_TYPE_BUY || type == ORDER_TYPE_SELL)
    {
        lots = OrderLots();
    }
    else
    {
        lots = 0;
    }
    // Return the number of lots of the current order
    return lots;
}

double OrderClosePrice()
{
    int ticket = OrderTicket(); 
    
    if (OrderSelect(ticket, SELECT_BY_TICKET, MODE_TRADES)) { 
        closePrice = OrderClosePrice(); 
    }
    return closePrice;
}

const int MODE_TRADES = 0;
const int SELECT_BY_POS = 1;

#define MODE_TRADES 0
#define SELECT_BY_POS 1
#define MODE_HISTORY 2
#define SELECT_BY_TICKET 3

//check for trend in higher time frames
int GetTrend(string symbol, ENUM_TIMEFRAMES tf)
{
	int trend = 0;
	double high = iHigh(symbol,tf,0);
	double low = iLow(symbol,tf,0);
	double high2 = iHigh(symbol,tf,1);
	double low2 = iLow(symbol,tf,1);
	if(high > high2 && low > low2)
		trend = 1;
	else if(high < high2 && low < low2)
		trend = -1;
	return trend;
}

const int OP_BUY = 0;
const int OP_SELL = 1;

ENUM_ORDER_TYPE OrderType() {
    return OrderType();
}
void OnInit()
{   
     // Initialize the CTrade object
    //Trade = new CTrade;
    Trade.SetExpertMagicNumber(Magic);
    
    if ((_Point == 0.00001) || (_Point == 0.001))
    {
        Poin = _Point * 10;
        Deviation = Slippage * 10;
    }
    else
    {
        Poin = _Point; // Normal
        Deviation = Slippage;
    }
    
    volFactor = GetVolatilityFactor(volPeriod);

   // Trade = new CTrade;
    Trade.SetDeviationInPoints(Deviation);

    EventSetTimer(1);
}

void  OnDeinit( 
   const int  reason         // deinitialization reason code 
   )
   
{
  if (reason!=REASON_CHARTCHANGE)
  {
     ObjectsDeleteAll(0,"calcbox");
     ObjectsDeleteAll(0,"tradeend");
  }   

}


double CopyBufferMQL5(int handle,int index,int shift)
  {
   double buf[];
   switch(index)
     {
      case 0: if(CopyBuffer(handle,0,shift,1,buf)>0)
         return(buf[0]); break;
      case 1: if(CopyBuffer(handle,1,shift,1,buf)>0)
         return(buf[0]); break;
      case 2: if(CopyBuffer(handle,2,shift,1,buf)>0)
         return(buf[0]); break;
      case 3: if(CopyBuffer(handle,3,shift,1,buf)>0)
         return(buf[0]); break;
      case 4: if(CopyBuffer(handle,4,shift,1,buf)>0)
         return(buf[0]); break;
      default: break;
     }
   return(EMPTY_VALUE);
  }


double iMAMQL5(string symbol,
               ENUM_TIMEFRAMES timeframe,
               int period,
               int ma_shift,
               ENUM_MA_METHOD ma_method,
               ENUM_APPLIED_PRICE applied_price,
               int shift)
  {
  
  
   int handle=iMA(symbol,timeframe,period,ma_shift,
                  ma_method,applied_price);
   if(handle<0)
     {
      Print("The iMA object is not created: Error",GetLastError());
      return(-1);
     }
   else
      return(CopyBufferMQL5(handle,0,shift));
  }
  
  
double iRSIMQL5(string symbol,
                ENUM_TIMEFRAMES timeframe,
                int period,
                ENUM_APPLIED_PRICE applied_price,
                int shift)
  {
  
   int handle=iRSI(symbol,timeframe,period,applied_price);
   if(handle<0)
     {
      Print("The iRSI object is not created: Error",GetLastError());
      return(-1);
     }
   else
      return(CopyBufferMQL5(handle,0,shift));
  }  

void GetHeikinAshiCloses(double & haClose[])
{
double haOpenprev = iOpen(_Symbol, PERIOD_M5, 5);
	double haCloseprev = (iClose(_Symbol, PERIOD_M5, 5)+iOpen(_Symbol, PERIOD_M5, 5)+iHigh(_Symbol, PERIOD_M5, 5)
	+ iLow(_Symbol, PERIOD_M5, 5))/4;
	for (int i=4; i>=0; i--)
	{
		double haOpenVal = (haOpenprev + haCloseprev) / 2.0;
		double HighVal = iHigh(_Symbol, PERIOD_M5, i);
		double LowVal = iLow(_Symbol, PERIOD_M5, i);
		double OpenVal = iOpen(_Symbol, PERIOD_M5, i);
		haClose[i] = (OpenVal + HighVal + LowVal + iClose(_Symbol, PERIOD_M5, i)) / 4.0;
		haOpenprev = haOpenVal;
		haCloseprev = haClose[i];
	}	
}	
int olds = -1;
//+------------------------------------------------------------------+ 
//|                             OnTick()                              | 
//+------------------------------------------------------------------+ 
void OnTick() 
{ 
  
	int s = GetSession();
	// Get the high and low of the 5-minute timeframe
	if (s!=olds)
	{
	  Print("session:",s);
	  olds = s;
	}
	
	if (s<0)
	  return;
	  
	  if (ShowTradeEnd)
    {
     VLineCreate(0,"tradeend"+tradesessionend,0,tradesessionend,clrRed);
    }
	
	if (s==0)
	{
	  GetDR(RegularDRSessionStart,RegularDRSessionEnd);
	 
   }
			
	if (s==1)
	  GetDR(EveningDRSessionStart,EveningDRSessionEnd);
	  
	if (s==2)
	  GetDR(OvernightDRSessionStart,OvernightDRSessionEnd);
	  
	  
	double Close[5];
	int b = iBarShift(Symbol(),PERIOD_M5,closecheck);
	datetime btime = iTime(Symbol(),PERIOD_M5,b);
	if (btime!=closecheck || b<1)
	  return;
	  
	for (int i=1; i<6; i++)
	{
			Close[i-1] = iClose(_Symbol, PERIOD_M5, i);
   }
	//Print(closecheck);  
	//  idr.GetNewYork();
	
	// Get the current market trend 
	int trendM1 = GetTrend(_Symbol, PERIOD_M1); 
	int trendM30 = GetTrend(_Symbol, PERIOD_M30); 
	int trendM15 = GetTrend(_Symbol, PERIOD_M15); 
	int trendM5 = GetTrend(_Symbol, PERIOD_M5); 
	int trendH1 = GetTrend(_Symbol, PERIOD_H1); 
	int trendH4 = GetTrend(_Symbol, PERIOD_H4); 
	int trendD1 = GetTrend(_Symbol, PERIOD_D1); 
	
	// Get the fast and slow MA
	double fastMA = iMAMQL5(NULL, 0, 10, 0, MODE_EMA, PRICE_CLOSE,1);
	double flexMA = iMAMQL5(NULL, 0, 20, 0, MODE_EMA, PRICE_CLOSE,1);
	double slowMA = iMAMQL5(NULL, 0, 200, 0, MODE_EMA, PRICE_CLOSE,1); 
	
	if (slowMA==EMPTY_VALUE) // no data yet
	  return; 
	
	// Get the ADX 
	//int adx = iADX(_Symbol, _Period, PERIOD_M5); 
	
	// Get the RSI 
	double rsi = iRSIMQL5(_Symbol, _Period, RsiPeriod, PRICE_WEIGHTED,1);
	
	if (rsi==EMPTY_VALUE) // no data yet
	  return; 
	
	// Get ATR
	//double atr = iATR(_Symbol, _Period, PERIOD_M5); */
	
	// Get DONCHIAN BANDS 
	double HighestHigh = iHighest(NULL, PERIOD_M5, MODE_HIGH, 20, 1); 
	double LowestLow = iLowest(NULL, PERIOD_M5, MODE_LOW, 20, 1);

	// Get Support & Resistance Points 
	double SR = GetSuppResPoints(); 
	double support = GetSuppResPoints() - SR; 
	double resistance = GetSuppResPoints() + SR;  	
   
	// Get the Heikin-Ashi Close
	double haClose[5];
	GetHeikinAshiCloses(haClose);
	
	
	Execution_Mode = (ENUM_SYMBOL_TRADE_EXECUTION)SymbolInfoInteger(Symbol(), SYMBOL_TRADE_EXEMODE);

	if (Execution_Mode != SYMBOL_TRADE_EXECUTION_INSTANT) DoSLTP(); 
	
	// Check if enough seconds have passed for random entry 

	if (TimeCurrent()-LastEntryTime < RandomEntryPeriod) return; 
	LastEntryTime = TimeCurrent();
	
	
	// Check for strong bullish or bearish market trends 
	if(trendM5 > 0 && trendM15 > 0 && trendM1 > 0)
	{ 
	  
		//Checking for an uptrend 
		if(slowMA < flexMA < fastMA)
		{ 
		  //Print("ma trend");
			//Check the Flex indicator 
			if(slowMA < flexMA < fastMA) 
			{ 
			  
				//Check the RSI Indicator
				//Print(rsi);
				if(slowMA < flexMA < fastMA)
				{
				//  Print("rsi test");
					//Check the Multiflex Indicator
					if(slowMA < flexMA < fastMA)
					{
						//Check for a bullish candle in Heikin-Ashi chart
						if(slowMA < flexMA < fastMA)
						{
							fBuy();
						}
					}
				}
			}
		}
	}
	else if(slowMA > flexMA > fastMA) 
	{ 
		//Checking for a downtrend 
		if(slowMA > flexMA > fastMA)
		{ 
			//Check the Flex indicator 
			if(slowMA > flexMA > fastMA) 
			{ 
				//Check the RSI Indicator 
				if(slowMA > flexMA > fastMA)
				{
					//Check the Multiflex Indicator
					if(slowMA > flexMA > fastMA)
					{	
						//Check for a bearish candle in Heikin-Ashi chart 
						if(slowMA > flexMA > fastMA)
						{ 
							fSell(); 
						} 
					}
				} 
			}
		} 
	} 

	// Reset the seconds counter 
	
	DoSLTP(); 
} 
datetime tradesessionend = 0;
int GetSession()
{
   datetime startdt1 = TimeToDt(int(RegularDRSessionEnd/100),RegularDRSessionEnd %100,0);
    
    datetime enddt1 = TimeToDt(int(RegularDRTradeEnd/100),RegularDRTradeEnd%100,0); 
    if (enddt1<startdt1)
      enddt1+=3600*24;
      
      
    datetime startdt2 = TimeToDt(int(EveningDRSessionEnd/100),EveningDRSessionEnd %100,0);
    
    datetime enddt2 = TimeToDt(int(EveningDRTradeEnd/100),EveningDRTradeEnd%100,0); 
    if (enddt2<startdt2)
      enddt2+=3600*24;
      
      
    datetime startdt3 = TimeToDt(int(OvernightDRSessionEnd/100),OvernightDRSessionEnd %100,0);
    
    datetime enddt3 = TimeToDt(int(OvernightDRTradeEnd/100),OvernightDRTradeEnd%100,0); 
    if (enddt3<startdt3)
      enddt3+=3600*24;
      
      
  
      
    if (TimeCurrent()>=startdt1 && TimeCurrent()<enddt1)
    {
        tradesessionend = enddt1;
      return 0;
    }  
      
   if (TimeCurrent()>=startdt2 && TimeCurrent()<enddt2)
   {
      tradesessionend = enddt2;
      return 1;
   }   
      
   if (TimeCurrent()>=startdt3 && TimeCurrent()<enddt3)
   {
      tradesessionend = enddt3;
      return 2;
   }   
    
   return -1;

}
datetime closecheck;
bool GetDR(int sessionstart,int sessionend)
{
    // Calculate the high and low of the 5-minute timeframe during the session
    datetime startdt = TimeToDt(int(sessionstart/100),sessionstart%100,0);
    int nextday = 0;
    
    
    datetime enddt = TimeToDt(int(sessionend/100),sessionend%100,0); 
    if (enddt<startdt)
      enddt+=3600*24;
    
    double high = 0;
    double low = DBL_MAX;
    int start= iBarShift(Symbol(),PERIOD_M5,startdt);
    int end= iBarShift(Symbol(),PERIOD_M5,enddt);
    for(int i = end+1; i <= start; i ++)
    {
        if(iHigh(Symbol(), PERIOD_M5, i) > high)
        {
            high = iHigh(Symbol(), PERIOD_M5, i);
          //  Print(high);
        }
        if(iLow(Symbol(), PERIOD_M5, i) < low)
        {
            low = iLow(Symbol(), PERIOD_M5, i);
        }
    }
    DR_high = high;
    DR_low = low;
    closecheck = enddt;
    
    if (ShowBoxes)
    {
    // Print("rect ",startdt," ",DR_low," ",enddt," ",DR_high," ",start," ", end);
     RectangleCreate(0,"calcbox"+closecheck,0,startdt,DR_low,enddt,DR_high,clrRed,STYLE_SOLID,1);
    
    }
   
  /*  if (TimeCurrent()<tradeend)
      return false;
      
    if (startdt>enddt && TimeCurrent()<enddt)
      return false;*/
    return true;
}
class idrclass
{
 public:
 double high;
 double low;
 
 void ini()
 {
    low = MathMin(iClose(NULL,PERIOD_CURRENT,0),iOpen(NULL,PERIOD_CURRENT,0));
    high = MathMax(iClose(NULL,PERIOD_CURRENT,0),iOpen(NULL,PERIOD_CURRENT,0));
 } 
 
 void update()
 {
   high = MathMax(iOpen(NULL,PERIOD_CURRENT,0), MathMax( iClose(NULL,PERIOD_CURRENT,0), high));
   low = MathMin(iOpen(NULL,PERIOD_CURRENT,0), MathMin(iClose(NULL,PERIOD_CURRENT,0), low));
 
 }
 
 void GetNewYork()
{
   datetime startdt = TimeToDt(09,30,0);
   datetime enddt = TimeToDt(10,30,0); 
   if (TimeCurrent()<startdt)
   {
     ini();
   }
   else  if (TimeCurrent()<enddt && TimeCurrent()>=startdt )
    {
    
      update();
    }

}


};
idrclass idr;

//CLOSING BAD POSITION WHEN MARKET MOVES
//Update:
//add logic to close bad positions when the market moves

void CloseBadPositionWhenMarketMoves() 
{
    for (int p = 0; p < PositionsTotal(); p++) 
    {
        if (!PositionSelectByTicket(PositionGetTicket(p))) continue;
        long PosMagic = PositionGetInteger(POSITION_MAGIC);
        if (PosMagic != Magic) continue;
        
        double PosOpenPrice = PositionGetDouble(POSITION_PRICE_OPEN);
        double PosCurrentPrice = PositionGetDouble(POSITION_PRICE_CURRENT);
        long PosType = PositionGetInteger(POSITION_TYPE);
        ulong PosTicket = PositionGetTicket(p);
        
        //Check the trend in the H4 & H1 timeframes 
        int trendD1 = GetTrend(_Symbol, PERIOD_D1);
        int trendH4 = GetTrend(_Symbol, PERIOD_H4);
	     int trendH1 = GetTrend(_Symbol, PERIOD_H1);
        int trendM1 = GetTrend(_Symbol, PERIOD_M1);
        int trendM5 = GetTrend(_Symbol, PERIOD_M5);
        
		
	   // Get the fast and slow MA
	   double fastMA = iMA(NULL, 0, 50, 0, MODE_EMA, PRICE_CLOSE);
	   double slowMA = iMA(NULL, 0, 200, 0, MODE_EMA, PRICE_CLOSE);
	
	
		// Get the ADX 
		int adx = iADX(_Symbol, _Period, PERIOD_M5);
	
		// Get the RSI
		double rsi = iRSI(_Symbol, _Period, PERIOD_M5, PRICE_TYPICAL);
	
		// Get ATR
		double atr = iATR(_Symbol, _Period, PERIOD_M5);  
	
		// Get the Heikin-Ashi Close
		double haClose[5];
		for (int i=0; i<5; i++)
		{
			double haOpenVal = (iOpen(_Symbol, PERIOD_M5, i) + iClose(_Symbol, PERIOD_M5, i)) / 2.0;
			double haHighVal = iHigh(_Symbol, PERIOD_M5, i);
			double haLowVal = iLow(_Symbol, PERIOD_M5, i);
			haClose[i] = (haOpenVal + haHighVal + haLowVal + iClose(_Symbol, PERIOD_M5, i)) / 4.0;
		}
		
		
        //If the market moves against the position 
        if (haClose[1] < haClose[0] && haClose[2] < haClose[1] && haClose[3] < haClose[2] && haClose[4] < haClose[3]) 
        {
            //If the market moves strongly against position
            if (PosType == POSITION_TYPE_BUY && (PosCurrentPrice < PosOpenPrice - StopLoss * Poin))
            
            {
            	Trade.PositionClose(PosTicket);
            }
        }    
        
        //If the market moves against the positioN
        if (haClose[1] > haClose[0] && haClose[2] > haClose[1] && haClose[3] > haClose[2] && haClose[4] > haClose[3]) 
        {
            //If the market moves strongly against position
            if (PosType == POSITION_TYPE_SELL && (PosCurrentPrice > PosOpenPrice + StopLoss * Poin))
            {
            	Trade.PositionClose(PosTicket);
            }  
           
        }
    }
}


//update functions fBuy() and fSell()
void fBuy()
{ 
    //check the max number of positions is not exceed
    if (maxPositions <= GetOrdersTotal())
    {
        return;
    }
    
	 double SL = 0, TP = 0;
    double Bid = SymbolInfoDouble(Symbol(), SYMBOL_BID);
   // if (Execution_Mode == SYMBOL_TRADE_EXECUTION_INSTANT)
    {
    	if (dynamicSL == 1) 
		{
	        if (StopLoss > 0) SL = NormalizeDouble(Bid + StopLoss * Poin * volFactor * volatilityMultipler, _Digits);
	        if (TakeProfit > 0) TP = NormalizeDouble(Bid - TakeProfit * Poin * volFactor * volatilityMultipler, _Digits);
    	}
    	else
    	{
        	if (StopLoss > 0) SL = NormalizeDouble(Bid + StopLoss * Poin, _Digits);
	        if (TakeProfit > 0) TP = NormalizeDouble(Bid - TakeProfit * Poin, _Digits);
    	}
    }
    if (!Trade.PositionOpen(_Symbol, ORDER_TYPE_BUY, Lots, Bid, SL, TP, Commentary))
    {
        int e = GetLastError();
        Print("OrderSend Error: ", e);
    }
    Print("buy done");

}
void fSell()
{ 
    //check the max number of positions is not exceed
    if (maxPositions <= GetOrdersTotal())
    {
        return;
    }
    
	 double SL = 0, TP = 0;
    double Bid = SymbolInfoDouble(Symbol(), SYMBOL_BID);
   // if (Execution_Mode == SYMBOL_TRADE_EXECUTION_INSTANT)
    {
    	if (dynamicSL == 1) 
		{
	        if (StopLoss > 0) SL = NormalizeDouble(Bid + StopLoss * Poin * volFactor * volatilityMultipler, _Digits);
	        if (TakeProfit > 0) TP = NormalizeDouble(Bid - TakeProfit * Poin * volFactor * volatilityMultipler, _Digits);
    	}
    	else
    	{
        	if (StopLoss > 0) SL = NormalizeDouble(Bid + StopLoss * Poin, _Digits);
	        if (TakeProfit > 0) TP = NormalizeDouble(Bid - TakeProfit * Poin, _Digits);
    	}
    }
    if (!Trade.PositionOpen(_Symbol, ORDER_TYPE_SELL, Lots, Bid, SL, TP, Commentary))
    {
        int e = GetLastError();
        Print("OrderSend Error: ", e);
    }

}
// Applies SL and TP to open positions
void DoSLTP()
{
    double SL = 0, TP = 0;
    volFactor = GetVolatilityFactor(volPeriod);

    for (int i = 0; i < PositionsTotal(); i++)
    {
        if (!PositionSelectByTicket(PositionGetTicket(i))) continue;
        long PosMagic = PositionGetInteger(POSITION_MAGIC);     

        //skip Hedge positions with magic number Magic + 1
        if (PosMagic == Magic + 1) continue; 

    
        double PosOpenPrice = PositionGetDouble(POSITION_PRICE_OPEN);
        double PosCurrentPrice = PositionGetDouble(POSITION_PRICE_CURRENT);
        double PosStopLoss = PositionGetDouble(POSITION_SL);
        double PosTakeProfit = PositionGetDouble(POSITION_TP);
        long PosType = PositionGetInteger(POSITION_TYPE);
        ulong PosTicket = PositionGetTicket(i);
       
        
        if (PosType == POSITION_TYPE_BUY)
        {
            // Check if market has moved in favor of trade by TrailingStopPips pips
            if (PosCurrentPrice > PosOpenPrice + TrailingStopPips * Poin)
            {
                // Activate trailing stop
                SL = NormalizeDouble(PosCurrentPrice - TrailingStopPips * Poin, _Digits);
                // Update stop loss if necessary
                Print("buy trailing stop update");
                if (SL > PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
            }
            else
            {
            	if (dynamicSL == 1) 
				{
		            // Deactivate trailing stop
		            SL = NormalizeDouble(PosOpenPrice - StopLoss * Poin * volFactor, _Digits);
		            // Update stop loss if necessary
		            Print("buy set stoploss based on volFactor");
		            if (SL != PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
		        }
		        else
		        {
        			// Deactivate trailing stop
		            SL = NormalizeDouble(PosOpenPrice - StopLoss * Poin, _Digits);
		            // Update stop loss if necessary
		            Print("buy set fixed stoploss");
		            if (SL != PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
		        }
            }
        }
        else if (PosType == POSITION_TYPE_SELL)
        {
            // Check if market has moved in favor of trade by TrailingStopPips pips
            if (PosCurrentPrice < PosOpenPrice - TrailingStopPips * Poin)
            {
                // Activate trailing stop
                SL = NormalizeDouble(PosCurrentPrice + TrailingStopPips * Poin, _Digits);
                // Update stop loss if necessary
                Print("sell trailing stop update");
                if (SL < PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
            }
            else
            {
            	if (dynamicSL == 1) 
				{
		            // Deactivate trailing stop
		            SL = NormalizeDouble(PosOpenPrice + StopLoss * Poin * volFactor, _Digits);
		            // Update stop loss if necessary
		            Print("sell set stoploss based on volFactor");
		            if (SL != PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
		        }
		        else
		        {
        			// Deactivate trailing stop
		            SL = NormalizeDouble(PosOpenPrice + StopLoss * Poin, _Digits);
		            // Update stop loss if necessary
		            Print("sell set fixed stoploss");
		            if (SL != PosStopLoss) Trade.PositionModify(PosTicket, SL, PosTakeProfit);
		        }
            }
        }

        if (dynamicSL == 1) 
		{
	        // Update take profit if necessary
	        if (TakeProfit > 0)
	        {
	            if (PosType == POSITION_TYPE_BUY) TP = NormalizeDouble(PosOpenPrice + TakeProfit * Poin * volFactor, _Digits);
	            else if (PosType == POSITION_TYPE_SELL) TP = NormalizeDouble(PosOpenPrice - TakeProfit * Poin * volFactor, _Digits);
	            if (TP != PosTakeProfit) Trade.PositionModify(PosTicket, PosStopLoss, TP);
	        }
	    }
	    else
	    {
	    	// Update take profit if necessary
	        if (TakeProfit > 0)
	        {
	            if (PosType == POSITION_TYPE_BUY) TP = NormalizeDouble(PosOpenPrice + TakeProfit * Poin, _Digits);
	            else if (PosType == POSITION_TYPE_SELL) TP = NormalizeDouble(PosOpenPrice - TakeProfit * Poin, _Digits);
	            if (TP != PosTakeProfit) Trade.PositionModify(PosTicket, PosStopLoss, TP);
	        }
	    }
    }
}
double GetVolatilityFactor(int period)
{
    int limit = period + 10;
    double volatility = 0;
    
    double highesthigh = 0;
    double lowest = 0;

    // Get highest high within the period
    for (int i = 0; i < limit; i++)
    {
        double high = iHigh(_Symbol, PERIOD_CURRENT, i);
        if ((i == 0) || (high > highesthigh)) highesthigh = high;
    }

    // Get lowest low within the period
    for (int i = 0; i < limit; i++)
    {
        double low = iLow(_Symbol, PERIOD_CURRENT, i);
        if ((i == 0) || (low < lowest)) 
        {  lowest = low;
          volatility = highesthigh - lowest;
        
        }
    }

    // Calculate the percentages
    if (volatility <= 0) return 1;
    return volatility;
  //  return NormalizeDouble(100 / volatility, 0);
}

bool RectangleCreate(const long            chart_ID=0,        // chart's ID
                     const string          name="Rectangle",  // rectangle name
                     const int             sub_window=0,      // subwindow index
                     datetime              time1=0,           // first point time
                     double                price1=0,          // first point price
                     datetime              time2=0,           // second point time
                     double                price2=0,          // second point price
                     const color           clr=clrRed,        // rectangle color
                     const ENUM_LINE_STYLE style=STYLE_SOLID, // style of rectangle lines
                     const int             width=1,           // width of rectangle lines
                     const bool            fill=false,        // filling rectangle with color
                     const bool            back=false,        // in the background
                     const bool            selection=true,    // highlight to move
                     const bool            hidden=true,       // hidden in the object list
                     const long            z_order=0)         // priority for mouse click
  {
//--- set anchor points' coordinates if they are not set
//ChangeRectangleEmptyPoints(time1,price1,time2,price2);
//--- reset the error value
   ResetLastError();
//--- create a rectangle by the given coordinates
   if(!ObjectCreate(chart_ID,name,OBJ_RECTANGLE,sub_window,time1,price1,time2,price2))
     {
      if(ObjectFind(chart_ID,name)<0)
        {
         Print(__FUNCTION__,
               ": failed to create a rectangle! Error code = ",GetLastError());
         return(false);
        }
     }
//--- set rectangle color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set the style of rectangle lines
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);
//--- set width of the rectangle lines
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);
//--- enable (true) or disable (false) the mode of filling the rectangle
   ObjectSetInteger(chart_ID,name,OBJPROP_FILL,fill);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of highlighting the rectangle for moving
//--- when creating a graphical object using ObjectCreate function, the object cannot be
//--- highlighted and moved by default. Inside this method, selection parameter
//--- is true by default making it possible to highlight and move the object
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }
  
  
  bool VLineCreate(const long          chart_ID=0,        // chart's ID
                 const string          name="VLine",      // line name
                 const int             sub_window=0,      // subwindow index
                 datetime              time=0,            // line time
                 const color           clr=clrRed,        // line color
                 const ENUM_LINE_STYLE style=STYLE_SOLID, // line style
                 const int             width=1,           // line width
                 const bool            back=false,        // in the background
                 const bool            selection=true,    // highlight to move
                 const bool            hidden=false,       // hidden in the object list
                 const long            z_order=0)         // priority for mouse click
  {
//--- if the line time is not set, draw it via the last bar
   if(!time)
      time=TimeCurrent();
//--- reset the error value
   ResetLastError();
//--- create a vertical line
   if(!ObjectCreate(chart_ID,name,OBJ_VLINE,sub_window,time,0))
     {
       if (ObjectFind(chart_ID,name)<0)
      {
      Print(__FUNCTION__,
            ": failed to create a vertical line! Error code = ",GetLastError());
      return(false);
      }
     }
//--- set line color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set line display style
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);
//--- set line width
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of moving the line by mouse
//--- when creating a graphical object using ObjectCreate function, the object cannot be
//--- highlighted and moved by default. Inside this method, selection parameter
//--- is true by default making it possible to highlight and move the object
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }




// Timer function
void OnTimer()
{
    EventSetTimer(1);
}
